---
# gather the facts
- name: Collect only facts returned by facter
  setup:
    gather_subset:
      - '!all'
      - '!any'
      - facter

# check if the host is virtual or physical
- name: Debug the ansible_virtualization_role
  debug:
    msg: This is a Virtual Host
  when: ansible_virtualization_role == 'guest'
  ignore_errors: yes

- name: Debug the ansible_virtualization_role
  debug:
    msg: This is a Physical Host
  when: ansible_virtualization_role == 'host'
  ignore_errors: yes

# check the type of Ubuntu 16.04 18.04 or 19.04
- name: Check OS Version via /etc/issue
  tasks:
    - name: cat /etc/issue
    shell: cat /etc/issue | awk '{printf $2}'
    register: etc_issue
    - debug: msg="{{etc_issue.stdout_lines}}"

# install the docker
- name: install docker for Ubuntu 16.04
  shell: 


- name: Check docker.service status
  shell: sudo systemctl status docker
  args:
    executable: /bin/bash

# install the docker-compose
- name: install docker-compose for Ubuntu 16.04
  shell: |
    sudo curl -L https://github.com/docker/compose/releases/download/1.18.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
  args:
    executable: /bin/bash
    when: ( etc_issue.stdout_lines == '16.04.6' and ansible_architecture == 'x86_64')

- name: install docker-compose for Ubuntu 16.04
  shell: |
    sudo curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
  args:
    executable: /bin/bash
    when: ( etc_issue.stdout_lines == '18.04.4' and ansible_architecture == 'x86_64')  

# create /tmp/openairinerface
- name: create /tmp/openairinterface
  file:
    path: /tmp/openairinterface
    state: directory

# docker-compose files copy to the destination host
- name: Copy the openairinterface docker-compose files
  copy:
    src: "{ role_path }/files/openairinterface/docker-compose.yml"
    dest: /tmp/openairinterface
    owner: root
    group: root
    mode: '0640'
    when: oai_install == 'true'

# create /tmp/devopstools
- name: create /tmp/devopstools
  file:
    path: /tmp/devopstools
    state: directory

# docker-compose files copy to the destination host
- name: Copy the DevOps docker-compose files
  copy:
    src: "{ role_path }/files/devopstools/docker-compose.yml"
    dest: /tmp/devopstools
    owner: root
    group: root
    mode: '0640'
    when: devops_install == 'true'

# https://docs.ansible.com/ansible/latest/modules/docker_compose_module.htmls
# cd /tmp/openairinterface; docker-compose up -d run
- name: Run the docker-compose
  shell: |
    cd /tmp/openairinterface; 
    docker-compose up -d run
  args:
    executable: /bin/bash
    when: ( oai_install == 'true')  

# cd /tmp/devopstools; docker-compose up -d run
- name: Run the docker-compose
  shell: |
    cd /tmp/devopstools; 
    docker-compose up -d run
  args:
    executable: /bin/bash
    when: ( devops_install == 'true')  

# Monitoring installation only if required in the inventory file
# preconfiguration for installing grafana
- name: Install the prerequires for the monitoring systemctl
  copy: 
    src: "{{ role_path }}/files/Ubuntu16.04-monitoring.sh"
    dest: /tmp/
    owner: root
    group: root
    mode: '0640'
    when: influxdb_install == 'true' and telegraf_install == 'true' and grafana_install == 'true' 

# installing grafana
- name: Ensure a list of packages installed
  apt:
    name: "{{ packages }}"
    state: installed
    vars:
    packages:
    - grafana

# sudo systemctl start grafana-server 
- name: systemctl start grafana-server
  shell: |
    sudo systemctl start grafana-server
  args:
    executable: /bin/bash
    when: ( grafana_install == 'true')  

#sudo systemctl status grafana-server
- name: systemctl status grafana-server
  shell: |
    sudo systemctl status grafana-server
  args:
    executable: /bin/bash
    when: ( grafana_install == 'true')  

# sudo systemctl enable grafana-server
- name: systemctl enable grafana-server
  shell: |
    sudo systemctl enable grafana-server
  args:
    executable: /bin/bash
    when: ( grafana_install == 'true')  

- name: Install influxdb
  apt:
    name: "{{ packages }}"
    state: installed
    vars:
      packages:
        - influxdb

# telegraf installation
- name: Install telegraf
  apt:
    name: "{{ packages }}"
    state: installed
    vars:
      packages:
        - telegraf

#sudo apt-get -y install telegraf
#sudo systemctl enable --now telegraf
- name: sudo systemctl enable --now telegraf
  shell: |
    sudo systemctl enable --now telegraf
  args:
    executable: /bin/bash
    when: ( telegraf_install == 'true')  
  
#systemctl status telegraf
- name: sudo systemctl status telegraf
  shell: |
    sudo systemctl status telegraf
  args:
    executable: /bin/bash
    when: ( telegraf_install == 'true')  

# copy the basic configuration of the /etc/telegraf/telegraf.conf


# creating the telegraf-docker.service systemd
- name: Copy the telegraf-docker.service files
  copy:
    src: "{ role_path }/files/systemd/telegraf-docker.service"
    dest: /etc/systemd/system
    owner: root
    group: root
    mode: '0640'
    when: telegraf_install == 'true'